{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI5C,MAAM,OAAO,eAAgB,SAAQ,SAAS;IAC5C,KAAK,CAAC,IAAI,CAAC,OAA0B;QACnC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC7B,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,WAAW,CAAC,OAA2C;QAC3D,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;QACpC,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,YAAY,CAAC,OAA0B;QAC3C,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;QACrC,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,WAAW,CAAC,OAA0B;QAC1C,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;QACpC,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,OAA0B;QAC5C,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,OAA0C;QACvD,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;QAC1C,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,SAAS,CAAC,OAAoD;QAClE,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;QACpC,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,OAAkJ;QAC7J,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QACjC,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,OAAO,CAAC,OAA8E;QAC1F,OAAO,OAAO,CAAC;IACjB,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { RewaaNearpayPlugin } from './definitions';\n\nexport class RewaaNearpayWeb extends WebPlugin implements RewaaNearpayPlugin {\n  async echo(options: { value: string }): Promise<{ value: string }> {\n    console.log('ECHO', options);\n    return options;\n  }\n  async initNearpay(options: { token: string, isProd: boolean }): Promise<{ token: string }> {\n    console.log('initNearpay', options);\n    return options;\n  }\n  async setupNearpay(options: { token: string }): Promise<{ token: string }> {\n    console.log('setupNearpay', options);\n    return options;\n  }\n  async initPayment(options: { token: string }): Promise<{ token: string }> {\n    console.log('initPayment', options);\n    return options;\n  }\n\n  async logoutNearpay(options: { token: string }): Promise<{ token: string }> {    \n    return options;\n  }\n\n  async purchase(options: { amount: string, token: string }): Promise<{ amount: string, token: string }> {\n    console.log('purchase amount: ', options);\n    return options;\n  }\n  async reconcile(options: { enableReceiptUi: boolean, token: string }): Promise<{ enableReceiptUi: boolean, token: string }> {\n    console.log('reconcile: ', options);\n    return options;\n  }\n  async refund(options: { enableReceiptUi: boolean, amount: number, transactionReferenceRetrievalNumber: string, customerReferenceNumber: number, token: string }): Promise<{ enableReceiptUi: boolean, amount: number, transactionReferenceRetrievalNumber: string, customerReferenceNumber: number, token: string }> {\n    console.log('refund: ', options);\n    return options;\n  }\n  async reverse(options: { enableReceiptUi: boolean; transactionUuid: string, token: string; }): Promise<{ enableReceiptUi: boolean; transactionUuid: string, token: string; }> {\n    return options;\n  }\n}\n"]}