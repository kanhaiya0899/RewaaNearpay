{
  "api": {
    "name": "RewaaNearpayPlugin",
    "slug": "rewaanearpayplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "echo",
        "signature": "(options: { value: string; }) => Promise<{ value: string; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: string; }"
          }
        ],
        "returns": "Promise<{ value: string; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "echo"
      },
      {
        "name": "checkStatus",
        "signature": "(value: JSON) => Promise<JSON>",
        "parameters": [
          {
            "name": "value",
            "docs": "",
            "type": "JSON"
          }
        ],
        "returns": "Promise<JSON>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "JSON"
        ],
        "slug": "checkstatus"
      }
    ],
    "properties": []
  },
  "interfaces": [
    {
      "name": "JSON",
      "slug": "json",
      "docs": "An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.",
      "tags": [],
      "methods": [
        {
          "name": "parse",
          "signature": "(text: string, reviver?: ((this: any, key: string, value: any) => any) | undefined) => any",
          "parameters": [
            {
              "name": "text",
              "docs": "A valid JSON string.",
              "type": "string"
            },
            {
              "name": "reviver",
              "docs": "A function that transforms the results. This function is called for each member of the object.\r\nIf a member contains nested objects, the nested objects are transformed before the parent object is.",
              "type": "((this: any, key: string, value: any) => any) | undefined"
            }
          ],
          "returns": "any",
          "tags": [
            {
              "name": "param",
              "text": "text A valid JSON string."
            },
            {
              "name": "param",
              "text": "reviver A function that transforms the results. This function is called for each member of the object.\r\nIf a member contains nested objects, the nested objects are transformed before the parent object is."
            }
          ],
          "docs": "Converts a JavaScript Object Notation (JSON) string into an object.",
          "complexTypes": [],
          "slug": "parse"
        },
        {
          "name": "stringify",
          "signature": "(value: any, replacer?: ((this: any, key: string, value: any) => any) | undefined, space?: string | number | undefined) => string",
          "parameters": [
            {
              "name": "value",
              "docs": "A JavaScript value, usually an object or array, to be converted.",
              "type": "any"
            },
            {
              "name": "replacer",
              "docs": "A function that transforms the results.",
              "type": "((this: any, key: string, value: any) => any) | undefined"
            },
            {
              "name": "space",
              "docs": "Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.",
              "type": "string | number | undefined"
            }
          ],
          "returns": "string",
          "tags": [
            {
              "name": "param",
              "text": "value A JavaScript value, usually an object or array, to be converted."
            },
            {
              "name": "param",
              "text": "replacer A function that transforms the results."
            },
            {
              "name": "param",
              "text": "space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read."
            }
          ],
          "docs": "Converts a JavaScript value to a JavaScript Object Notation (JSON) string.",
          "complexTypes": [],
          "slug": "stringify"
        },
        {
          "name": "stringify",
          "signature": "(value: any, replacer?: (string | number)[] | null | undefined, space?: string | number | undefined) => string",
          "parameters": [
            {
              "name": "value",
              "docs": "A JavaScript value, usually an object or array, to be converted.",
              "type": "any"
            },
            {
              "name": "replacer",
              "docs": "An array of strings and numbers that acts as an approved list for selecting the object properties that will be stringified.",
              "type": "(string | number)[] | null | undefined"
            },
            {
              "name": "space",
              "docs": "Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.",
              "type": "string | number | undefined"
            }
          ],
          "returns": "string",
          "tags": [
            {
              "name": "param",
              "text": "value A JavaScript value, usually an object or array, to be converted."
            },
            {
              "name": "param",
              "text": "replacer An array of strings and numbers that acts as an approved list for selecting the object properties that will be stringified."
            },
            {
              "name": "param",
              "text": "space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read."
            }
          ],
          "docs": "Converts a JavaScript value to a JavaScript Object Notation (JSON) string.",
          "complexTypes": [],
          "slug": "stringify"
        }
      ],
      "properties": []
    }
  ],
  "enums": [],
  "typeAliases": [],
  "pluginConfigs": []
}